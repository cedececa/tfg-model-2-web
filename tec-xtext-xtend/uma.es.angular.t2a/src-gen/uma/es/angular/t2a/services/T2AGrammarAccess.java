/*
 * generated by Xtext 2.26.0
 */
package uma.es.angular.t2a.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class T2AGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class RootElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uma.es.angular.t2a.T2A.Root");
		private final Assignment cElementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cElementsElementParserRuleCall_0 = (RuleCall)cElementsAssignment.eContents().get(0);
		
		//Root:
		//    elements+=Element+;
		@Override public ParserRule getRule() { return rule; }
		
		//elements+=Element+
		public Assignment getElementsAssignment() { return cElementsAssignment; }
		
		//Element
		public RuleCall getElementsElementParserRuleCall_0() { return cElementsElementParserRuleCall_0; }
	}
	public class ElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uma.es.angular.t2a.T2A.Element");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPageParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEDOMParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Element:
		//    Page | EDOM;
		@Override public ParserRule getRule() { return rule; }
		
		//Page | EDOM
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Page
		public RuleCall getPageParserRuleCall_0() { return cPageParserRuleCall_0; }
		
		//EDOM
		public RuleCall getEDOMParserRuleCall_1() { return cEDOMParserRuleCall_1; }
	}
	public class PageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uma.es.angular.t2a.T2A.Page");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cHomeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cHomeHomeKeyword_3_0 = (Keyword)cHomeAssignment_3.eContents().get(0);
		private final Assignment cShowInNavAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final Keyword cShowInNavShowInNavKeyword_4_0 = (Keyword)cShowInNavAssignment_4.eContents().get(0);
		private final Assignment cPageFeaturesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cPageFeaturesPageFeatureParserRuleCall_5_0 = (RuleCall)cPageFeaturesAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Page:
		//    'Page' name=ID
		//    '{'
		//    (home?='home')?
		//    (showInNav?='showInNav')?
		//    (pageFeatures+=PageFeature)*
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Page' name=ID
		//'{'
		//(home?='home')?
		//(showInNav?='showInNav')?
		//(pageFeatures+=PageFeature)*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Page'
		public Keyword getPageKeyword_0() { return cPageKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//(home?='home')?
		public Assignment getHomeAssignment_3() { return cHomeAssignment_3; }
		
		//'home'
		public Keyword getHomeHomeKeyword_3_0() { return cHomeHomeKeyword_3_0; }
		
		//(showInNav?='showInNav')?
		public Assignment getShowInNavAssignment_4() { return cShowInNavAssignment_4; }
		
		//'showInNav'
		public Keyword getShowInNavShowInNavKeyword_4_0() { return cShowInNavShowInNavKeyword_4_0; }
		
		//(pageFeatures+=PageFeature)*
		public Assignment getPageFeaturesAssignment_5() { return cPageFeaturesAssignment_5; }
		
		//PageFeature
		public RuleCall getPageFeaturesPageFeatureParserRuleCall_5_0() { return cPageFeaturesPageFeatureParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class EDOMElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uma.es.angular.t2a.T2A.EDOM");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDOMParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCompParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EDOM:
		//    DOM | Comp;
		@Override public ParserRule getRule() { return rule; }
		
		//DOM | Comp
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DOM
		public RuleCall getDOMParserRuleCall_0() { return cDOMParserRuleCall_0; }
		
		//Comp
		public RuleCall getCompParserRuleCall_1() { return cCompParserRuleCall_1; }
	}
	public class DOMElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uma.es.angular.t2a.T2A.DOM");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDomKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cFeaturesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cFeaturesFeatureParserRuleCall_2_1_0 = (RuleCall)cFeaturesAssignment_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//DOM:
		//    'Dom' name=ID
		//    ('{'
		//    (features+=Feature)*
		//    '}')?;
		@Override public ParserRule getRule() { return rule; }
		
		//'Dom' name=ID
		//('{'
		//(features+=Feature)*
		//'}')?
		public Group getGroup() { return cGroup; }
		
		//'Dom'
		public Keyword getDomKeyword_0() { return cDomKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('{'
		//(features+=Feature)*
		//'}')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2_0() { return cLeftCurlyBracketKeyword_2_0; }
		
		//(features+=Feature)*
		public Assignment getFeaturesAssignment_2_1() { return cFeaturesAssignment_2_1; }
		
		//Feature
		public RuleCall getFeaturesFeatureParserRuleCall_2_1_0() { return cFeaturesFeatureParserRuleCall_2_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2_2() { return cRightCurlyBracketKeyword_2_2; }
	}
	public class CompElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uma.es.angular.t2a.T2A.Comp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCompKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cFeaturesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cFeaturesFeatureParserRuleCall_2_1_0 = (RuleCall)cFeaturesAssignment_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//Comp:
		//    'Comp' name=ID
		//    (
		//    '{'
		//        (features+=Feature)*
		//    '}'
		//    )?;
		@Override public ParserRule getRule() { return rule; }
		
		//'Comp' name=ID
		//(
		//'{'
		//    (features+=Feature)*
		//'}'
		//)?
		public Group getGroup() { return cGroup; }
		
		//'Comp'
		public Keyword getCompKeyword_0() { return cCompKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//(
		//'{'
		//    (features+=Feature)*
		//'}'
		//)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2_0() { return cLeftCurlyBracketKeyword_2_0; }
		
		//(features+=Feature)*
		public Assignment getFeaturesAssignment_2_1() { return cFeaturesAssignment_2_1; }
		
		//Feature
		public RuleCall getFeaturesFeatureParserRuleCall_2_1_0() { return cFeaturesFeatureParserRuleCall_2_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2_2() { return cRightCurlyBracketKeyword_2_2; }
	}
	public class InstanciaEDOMElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uma.es.angular.t2a.T2A.InstanciaEDOM");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cInstanciaAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cInstanciaEDOMCrossReference_0_0 = (CrossReference)cInstanciaAssignment_0.eContents().get(0);
		private final RuleCall cInstanciaEDOMIDTerminalRuleCall_0_0_1 = (RuleCall)cInstanciaEDOMCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cInsfeaturesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cInsfeaturesInstanceEDOMFeatureParserRuleCall_1_1_0 = (RuleCall)cInsfeaturesAssignment_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//InstanciaEDOM: instancia=[EDOM] ('{'
		//        (insfeatures+=InstanceEDOMFeature)*
		//    '}'
		//)?;
		@Override public ParserRule getRule() { return rule; }
		
		// instancia=[EDOM] ('{'
		//        (insfeatures+=InstanceEDOMFeature)*
		//    '}'
		//)?
		public Group getGroup() { return cGroup; }
		
		//instancia=[EDOM]
		public Assignment getInstanciaAssignment_0() { return cInstanciaAssignment_0; }
		
		//[EDOM]
		public CrossReference getInstanciaEDOMCrossReference_0_0() { return cInstanciaEDOMCrossReference_0_0; }
		
		//ID
		public RuleCall getInstanciaEDOMIDTerminalRuleCall_0_0_1() { return cInstanciaEDOMIDTerminalRuleCall_0_0_1; }
		
		// ('{'
		//        (insfeatures+=InstanceEDOMFeature)*
		//    '}'
		//)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_0() { return cLeftCurlyBracketKeyword_1_0; }
		
		//(insfeatures+=InstanceEDOMFeature)*
		public Assignment getInsfeaturesAssignment_1_1() { return cInsfeaturesAssignment_1_1; }
		
		//InstanceEDOMFeature
		public RuleCall getInsfeaturesInstanceEDOMFeatureParserRuleCall_1_1_0() { return cInsfeaturesInstanceEDOMFeatureParserRuleCall_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_2() { return cRightCurlyBracketKeyword_1_2; }
	}
	public class InstanceEDOMFeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uma.es.angular.t2a.T2A.InstanceEDOMFeature");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cInstanciaEDOMAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cInstanciaEDOMInstanciaEDOMParserRuleCall_0_0 = (RuleCall)cInstanciaEDOMAssignment_0.eContents().get(0);
		private final Assignment cStringAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cStringSTRINGTerminalRuleCall_1_0 = (RuleCall)cStringAssignment_1.eContents().get(0);
		
		//InstanceEDOMFeature:
		//    instanciaEDOM= InstanciaEDOM | string=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//instanciaEDOM= InstanciaEDOM | string=STRING
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//instanciaEDOM= InstanciaEDOM
		public Assignment getInstanciaEDOMAssignment_0() { return cInstanciaEDOMAssignment_0; }
		
		//InstanciaEDOM
		public RuleCall getInstanciaEDOMInstanciaEDOMParserRuleCall_0_0() { return cInstanciaEDOMInstanciaEDOMParserRuleCall_0_0; }
		
		//string=STRING
		public Assignment getStringAssignment_1() { return cStringAssignment_1; }
		
		//STRING
		public RuleCall getStringSTRINGTerminalRuleCall_1_0() { return cStringSTRINGTerminalRuleCall_1_0; }
	}
	public class PageFeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uma.es.angular.t2a.T2A.PageFeature");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cInstanciaEDOMAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cInstanciaEDOMInstanciaEDOMParserRuleCall_0_0 = (RuleCall)cInstanciaEDOMAssignment_0.eContents().get(0);
		private final Assignment cStringAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cStringSTRINGTerminalRuleCall_1_0 = (RuleCall)cStringAssignment_1.eContents().get(0);
		
		//PageFeature:
		//    instanciaEDOM=InstanciaEDOM |
		//    string=STRING ;
		@Override public ParserRule getRule() { return rule; }
		
		//instanciaEDOM=InstanciaEDOM |
		//string=STRING
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//instanciaEDOM=InstanciaEDOM
		public Assignment getInstanciaEDOMAssignment_0() { return cInstanciaEDOMAssignment_0; }
		
		//InstanciaEDOM
		public RuleCall getInstanciaEDOMInstanciaEDOMParserRuleCall_0_0() { return cInstanciaEDOMInstanciaEDOMParserRuleCall_0_0; }
		
		//string=STRING
		public Assignment getStringAssignment_1() { return cStringAssignment_1; }
		
		//STRING
		public RuleCall getStringSTRINGTerminalRuleCall_1_0() { return cStringSTRINGTerminalRuleCall_1_0; }
	}
	public class FeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uma.es.angular.t2a.T2A.Feature");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cInstanciaEDOMAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cInstanciaEDOMInstanciaEDOMParserRuleCall_0_0 = (RuleCall)cInstanciaEDOMAssignment_0.eContents().get(0);
		private final Assignment cAllowSlotAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cAllowSlotAllowSlotKeyword_1_0 = (Keyword)cAllowSlotAssignment_1.eContents().get(0);
		private final Assignment cStringAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cStringSTRINGTerminalRuleCall_2_0 = (RuleCall)cStringAssignment_2.eContents().get(0);
		
		//Feature:
		//    instanciaEDOM=InstanciaEDOM |
		//    AllowSlot?='AllowSlot' |
		//    string=STRING
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//instanciaEDOM=InstanciaEDOM |
		//AllowSlot?='AllowSlot' |
		//string=STRING
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//instanciaEDOM=InstanciaEDOM
		public Assignment getInstanciaEDOMAssignment_0() { return cInstanciaEDOMAssignment_0; }
		
		//InstanciaEDOM
		public RuleCall getInstanciaEDOMInstanciaEDOMParserRuleCall_0_0() { return cInstanciaEDOMInstanciaEDOMParserRuleCall_0_0; }
		
		//AllowSlot?='AllowSlot'
		public Assignment getAllowSlotAssignment_1() { return cAllowSlotAssignment_1; }
		
		//'AllowSlot'
		public Keyword getAllowSlotAllowSlotKeyword_1_0() { return cAllowSlotAllowSlotKeyword_1_0; }
		
		//string=STRING
		public Assignment getStringAssignment_2() { return cStringAssignment_2; }
		
		//STRING
		public RuleCall getStringSTRINGTerminalRuleCall_2_0() { return cStringSTRINGTerminalRuleCall_2_0; }
	}
	
	
	private final RootElements pRoot;
	private final ElementElements pElement;
	private final PageElements pPage;
	private final EDOMElements pEDOM;
	private final DOMElements pDOM;
	private final CompElements pComp;
	private final InstanciaEDOMElements pInstanciaEDOM;
	private final InstanceEDOMFeatureElements pInstanceEDOMFeature;
	private final PageFeatureElements pPageFeature;
	private final FeatureElements pFeature;
	private final TerminalRule tSTRING;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public T2AGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pRoot = new RootElements();
		this.pElement = new ElementElements();
		this.pPage = new PageElements();
		this.pEDOM = new EDOMElements();
		this.pDOM = new DOMElements();
		this.pComp = new CompElements();
		this.pInstanciaEDOM = new InstanciaEDOMElements();
		this.pInstanceEDOMFeature = new InstanceEDOMFeatureElements();
		this.pPageFeature = new PageFeatureElements();
		this.pFeature = new FeatureElements();
		this.tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "uma.es.angular.t2a.T2A.STRING");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("uma.es.angular.t2a.T2A".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Root:
	//    elements+=Element+;
	public RootElements getRootAccess() {
		return pRoot;
	}
	
	public ParserRule getRootRule() {
		return getRootAccess().getRule();
	}
	
	//Element:
	//    Page | EDOM;
	public ElementElements getElementAccess() {
		return pElement;
	}
	
	public ParserRule getElementRule() {
		return getElementAccess().getRule();
	}
	
	//Page:
	//    'Page' name=ID
	//    '{'
	//    (home?='home')?
	//    (showInNav?='showInNav')?
	//    (pageFeatures+=PageFeature)*
	//    '}';
	public PageElements getPageAccess() {
		return pPage;
	}
	
	public ParserRule getPageRule() {
		return getPageAccess().getRule();
	}
	
	//EDOM:
	//    DOM | Comp;
	public EDOMElements getEDOMAccess() {
		return pEDOM;
	}
	
	public ParserRule getEDOMRule() {
		return getEDOMAccess().getRule();
	}
	
	//DOM:
	//    'Dom' name=ID
	//    ('{'
	//    (features+=Feature)*
	//    '}')?;
	public DOMElements getDOMAccess() {
		return pDOM;
	}
	
	public ParserRule getDOMRule() {
		return getDOMAccess().getRule();
	}
	
	//Comp:
	//    'Comp' name=ID
	//    (
	//    '{'
	//        (features+=Feature)*
	//    '}'
	//    )?;
	public CompElements getCompAccess() {
		return pComp;
	}
	
	public ParserRule getCompRule() {
		return getCompAccess().getRule();
	}
	
	//InstanciaEDOM: instancia=[EDOM] ('{'
	//        (insfeatures+=InstanceEDOMFeature)*
	//    '}'
	//)?;
	public InstanciaEDOMElements getInstanciaEDOMAccess() {
		return pInstanciaEDOM;
	}
	
	public ParserRule getInstanciaEDOMRule() {
		return getInstanciaEDOMAccess().getRule();
	}
	
	//InstanceEDOMFeature:
	//    instanciaEDOM= InstanciaEDOM | string=STRING;
	public InstanceEDOMFeatureElements getInstanceEDOMFeatureAccess() {
		return pInstanceEDOMFeature;
	}
	
	public ParserRule getInstanceEDOMFeatureRule() {
		return getInstanceEDOMFeatureAccess().getRule();
	}
	
	//PageFeature:
	//    instanciaEDOM=InstanciaEDOM |
	//    string=STRING ;
	public PageFeatureElements getPageFeatureAccess() {
		return pPageFeature;
	}
	
	public ParserRule getPageFeatureRule() {
		return getPageFeatureAccess().getRule();
	}
	
	//Feature:
	//    instanciaEDOM=InstanciaEDOM |
	//    AllowSlot?='AllowSlot' |
	//    string=STRING
	//;
	public FeatureElements getFeatureAccess() {
		return pFeature;
	}
	
	public ParserRule getFeatureRule() {
		return getFeatureAccess().getRule();
	}
	
	//terminal STRING:
	//    '"' ( '\\'('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') | !('\\'|'"') )* '"' |
	//    "'" ( '\\'('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') | !('\\'|"'") )* "'";
	public TerminalRule getSTRINGRule() {
		return tSTRING;
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
