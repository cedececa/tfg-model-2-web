/**
 * generated by Xtext 2.26.0
 */
package uma.es.angular.t2a.generator;

import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import uma.es.angular.t2a.t2A.Comp;
import uma.es.angular.t2a.t2A.EDOM;
import uma.es.angular.t2a.t2A.Element;
import uma.es.angular.t2a.t2A.Feature;
import uma.es.angular.t2a.t2A.Page;
import uma.es.angular.t2a.t2A.PageFeature;
import uma.es.angular.t2a.t2A.Root;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class T2AGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    EObject _head = IterableExtensions.<EObject>head(resource.getContents());
    Root root = ((Root) _head);
    EList<Element> _elements = root.getElements();
    for (final Element element : _elements) {
      {
        boolean _equals = element.eClass().getName().equals("Page");
        if (_equals) {
          this.generateClassFile(((Page) element), fsa);
        }
        boolean _equals_1 = element.eClass().getName().equals("Comp");
        if (_equals_1) {
          this.generateClassFile(((Comp) element), fsa);
        }
      }
    }
  }
  
  public void generateClassFile(final Page page, final IFileSystemAccess2 fsa) {
    String _name = page.getName();
    String nameLowercase = new String(_name).toLowerCase();
    fsa.generateFile((((nameLowercase + "/") + nameLowercase) + ".page.ts"), this.toTSCode(page));
    fsa.generateFile((((nameLowercase + "/") + nameLowercase) + ".page.html"), this.toHTMLCode(page));
  }
  
  public void generateClassFile(final Comp comp, final IFileSystemAccess2 fsa) {
    String _name = comp.getName();
    String nameLowercase = new String(_name).toLowerCase();
    fsa.generateFile((((nameLowercase + "/") + nameLowercase) + ".page.ts"), this.toTSCode(comp));
    fsa.generateFile((((nameLowercase + "/") + nameLowercase) + ".page.html"), this.toHTMLCode(comp));
  }
  
  public String className(final Resource res) {
    String name = res.getURI().lastSegment();
    return name.substring(0, name.indexOf("."));
  }
  
  public CharSequence toTSCode(final Comp comp) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("@Component({");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("selector: \'");
    String _name = comp.getName();
    _builder.append(_name, "\t");
    _builder.append("\',");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("templateUrl: \'");
    String _name_1 = comp.getName();
    _builder.append(_name_1, "\t");
    _builder.append(".comp.html\',");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("styleUrls:[\'");
    String _name_2 = comp.getName();
    _builder.append(_name_2, "\t");
    _builder.append(".comp.scss\']\t");
    _builder.newLineIfNotEmpty();
    _builder.append("})");
    _builder.newLine();
    _builder.append("export class Comp");
    String _name_3 = comp.getName();
    _builder.append(_name_3);
    _builder.append("{");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence toTSCode(final Page page) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("@Component({");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("selector: \'");
    String _name = page.getName();
    _builder.append(_name, "\t");
    _builder.append("\',");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("templateUrl: \'");
    String _name_1 = page.getName();
    _builder.append(_name_1, "\t");
    _builder.append(".page.html\',");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("styleUrls:[\'");
    String _name_2 = page.getName();
    _builder.append(_name_2, "\t");
    _builder.append(".page.scss\']\t");
    _builder.newLineIfNotEmpty();
    _builder.append("})");
    _builder.newLine();
    _builder.append("export class Page");
    String _name_3 = page.getName();
    _builder.append(_name_3);
    _builder.append("{");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence toHTMLCode(final Comp comp) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<Feature> _features = comp.getFeatures();
      for(final Feature feature : _features) {
        Feature f = ((Feature) feature);
        _builder.newLineIfNotEmpty();
        {
          if (((f.getInstanciaEDOM() != null) && f.getInstanciaEDOM().getInstancia().eClass().getName().equals("comp"))) {
            _builder.append("<");
            String _name = f.getInstanciaEDOM().getInstancia().getName();
            _builder.append(_name);
            _builder.append("></");
            String _name_1 = f.getInstanciaEDOM().getInstancia().getName();
            _builder.append(_name_1);
            _builder.append(">");
            _builder.newLineIfNotEmpty();
          }
        }
        {
          boolean _isAllowSlot = f.isAllowSlot();
          if (_isAllowSlot) {
            _builder.append("<ng-content></ng-conteng>");
            _builder.newLine();
          }
        }
        {
          String _string = f.getString();
          boolean _tripleNotEquals = (_string != null);
          if (_tripleNotEquals) {
            String _string_1 = f.getString();
            _builder.append(_string_1);
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    return _builder;
  }
  
  public CharSequence toHTMLCode(final Page page) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<PageFeature> _pageFeatures = page.getPageFeatures();
      for(final PageFeature feature : _pageFeatures) {
        Feature pf = ((Feature) feature);
        _builder.newLineIfNotEmpty();
        {
          if (((pf.getInstanciaEDOM() != null) && pf.getInstanciaEDOM().getInstancia().eClass().getName().equals("comp"))) {
            _builder.append("<");
            String _name = pf.getInstanciaEDOM().getInstancia().getName();
            _builder.append(_name);
            _builder.append(">");
            _builder.newLineIfNotEmpty();
            {
              EList<Feature> _features = pf.getInstanciaEDOM().getInstancia().getFeatures();
              boolean _tripleNotEquals = (_features != null);
              if (_tripleNotEquals) {
                _builder.append("\t");
                EDOM _instancia = pf.getInstanciaEDOM().getInstancia();
                CharSequence _hTMLCode = this.toHTMLCode(((Comp) _instancia));
                _builder.append(_hTMLCode, "\t");
                _builder.newLineIfNotEmpty();
              }
            }
            _builder.append("</");
            String _name_1 = pf.getInstanciaEDOM().getInstancia().getName();
            _builder.append(_name_1);
            _builder.append(">");
            _builder.newLineIfNotEmpty();
          }
        }
        {
          String _string = pf.getString();
          boolean _tripleNotEquals_1 = (_string != null);
          if (_tripleNotEquals_1) {
            String _string_1 = pf.getString();
            _builder.append(_string_1);
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    return _builder;
  }
}
