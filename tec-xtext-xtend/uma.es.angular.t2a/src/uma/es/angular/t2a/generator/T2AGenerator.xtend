/*
 * generated by Xtext 2.26.0
 */
package uma.es.angular.t2a.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import uma.es.angular.t2a.t2A.Root
import uma.es.angular.t2a.t2A.Page
import uma.es.angular.t2a.t2A.Comp
import uma.es.angular.t2a.t2A.Feature
import uma.es.angular.t2a.t2A.PageFeature

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class T2AGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		var root = resource.contents.head as Root;
		for (element : root.elements) {
			if (element.eClass.name.equals('Page')) {
				generateClassFile(element as Page, fsa);
			}
			if (element.eClass.name.equals('Comp')) {
				generateClassFile(element as Comp, fsa);
			}
		}
	}

	def generateClassFile(Page page, IFileSystemAccess2 fsa) {
		var nameLowercase = (new String(page.name)).toLowerCase()
		fsa.generateFile(nameLowercase + '/' + nameLowercase + '.page.ts', toTSCode(page));
		fsa.generateFile(nameLowercase + '/' + nameLowercase + '.page.html', toHTMLCode(page));
	}

	def generateClassFile(Comp comp, IFileSystemAccess2 fsa) {
		var nameLowercase = (new String(comp.name)).toLowerCase()
		fsa.generateFile(nameLowercase + '/' + nameLowercase + '.page.ts', toTSCode(comp));
		fsa.generateFile(nameLowercase + '/' + nameLowercase + '.page.html', toHTMLCode(comp));
	}

	def className(Resource res) {
		var name = res.URI.lastSegment;
		return name.substring(0, name.indexOf('.'))
	}

	def toTSCode(Comp comp) {
		'''
			@Component({
				selector: '«comp.name»',
				templateUrl: '«comp.name».comp.html',
				styleUrls:['«comp.name».comp.scss']	
			})
			export class Comp«comp.name»{
				
			}
		'''
	}

	def toTSCode(Page page) {
		'''
			@Component({
				selector: '«page.name»',
				templateUrl: '«page.name».page.html',
				styleUrls:['«page.name».page.scss']	
			})
			export class Page«page.name»{
				
			}
		'''
	}

	def toHTMLCode(Comp comp) {
		'''
			«FOR feature : comp.features»
				«var f = feature as Feature»
				«IF f.instanciaEDOM !== null && f.instanciaEDOM.instancia.eClass.name.equals('comp')»
					<«f.instanciaEDOM.instancia.name»></«f.instanciaEDOM.instancia.name»>
				«ENDIF»
				«IF f.isAllowSlot»
					<ng-content></ng-conteng>
				«ENDIF»
				«IF f.string!==null»
					«f.string»
				«ENDIF»
			«ENDFOR»
		'''
	}

	def toHTMLCode(Page page) {
		'''
			«FOR feature : page.pageFeatures»
				«var pf = feature as PageFeature»
				«IF pf.instanciaEDOM !== null && pf.instanciaEDOM.instancia.eClass.name.equals('comp')»
					<«pf.instanciaEDOM.instancia.name»>
						«IF pf.instanciaEDOM.instancia.features !== null»
							«toHTMLCode(pf.instanciaEDOM.instancia as Comp)»
						«ENDIF»
					</«pf.instanciaEDOM.instancia.name»>
				«ENDIF»	
				«IF pf.string!==null»
					«pf.string»
				«ENDIF»
				«ENDFOR»
		'''
	}
}
