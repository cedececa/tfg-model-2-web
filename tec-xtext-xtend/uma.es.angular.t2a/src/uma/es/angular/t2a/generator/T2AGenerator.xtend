/*
 * generated by Xtext 2.26.0
 */
package uma.es.angular.t2a.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import uma.es.angular.t2a.t2A.Root
import uma.es.angular.t2a.t2A.Page
import uma.es.angular.t2a.t2A.Comp
import uma.es.angular.t2a.t2A.Feature
import uma.es.angular.t2a.t2A.PageFeature
import uma.es.angular.t2a.t2A.InstanciaEDOM
import uma.es.angular.t2a.t2A.InstanceEDOMFeature
import java.nio.file.Paths
import org.eclipse.emf.common.util.URI
import org.eclipse.core.resources.ResourcesPlugin
import java.util.ArrayList
import org.apache.commons.io.FileUtils
import java.io.IOException
import java.io.File

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class T2AGenerator extends AbstractGenerator {

	def deleteDirectoryContent(String path) {
		val dest = new File(path);

		try {
			FileUtils.deleteDirectory(dest);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	/*
	 * For the absolute path of the generated files
	 */
	def getSRCGenDirectoryAbsolutePath(IFileSystemAccess2 fsa) {
		var fileName = "dummy.txt";
		// generate a dummy file and extract the output directory from the file path
		fsa.generateFile(fileName, "dummy content")
		val uri = URI.createURI(fsa.getURI("dummy.txt").toString)

		val outputDir = if (uri.isFile()) {
				Paths.get(uri.toFileString()).getParent().toString()
			} else if (uri.isPlatform()) {
				ResourcesPlugin.getWorkspace().getRoot().getLocation().toFile().getAbsolutePath()
			} else {
				throw new IllegalArgumentException("Unsupported URI scheme: " + uri.scheme)
			}

		// delete the dummy file
		fsa.deleteFile(fileName)

		// use the generated file path as neede -  C:\Users\TFG\Documents\GitHub\tfg-model-2-web\runtime-EclipseXtext
		// println("Generated files path: " + outputDir)
		// Get relative path of the generated file
		var relativePath = uri.toPlatformString(true);

		// System.out.println(outputDir);   
		// System.out.println(relativePath);   
		relativePath = relativePath.replace("/", "\\").replace('\\' + fileName, '');

		System.out.println(outputDir + relativePath);

		return outputDir + relativePath;
	}

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {

		var absoluteSrcGenDirectory = getSRCGenDirectoryAbsolutePath(fsa);
		deleteDirectoryContent(absoluteSrcGenDirectory)
		
		var root = resource.contents.head as Root;
		
		StyleGlobalCSS.toStyleGlobalFile(root.globalStyle, fsa);
		IndexHTML.toIndexHTMLFile(root, fsa);
		
		var components = new ArrayList<Comp>();
		var pages = new ArrayList<Page>();
		
		for (element : root.elements) {
			if (element.eClass.name.equals('Page')) {
				var page = element as Page;
				AngularPage.generatePageFiles(page, fsa);
				pages.add(page);
				if (page.home == true) {
					AppModule.generarModule(fsa, page);
				}
			}
			if (element.eClass.name.equals('Comp')) {
				var comp = element as Comp;
				AngularComponent.generateComponentFiles(comp, fsa);
				components.add(comp);
			}
		}
		AppRoot.generarRoot(fsa, pages);
		ComponentModule.generarModule(fsa, components);
		PageModule.generarModule(fsa, pages);
		
		// pruebas jasmine, karma
		ComponentTestGenerator.generateAllTest(fsa,components)

		runAngularProject(absoluteSrcGenDirectory);
		
	}


	def className(Resource res) {
		var name = res.URI.lastSegment;
		return name.substring(0, name.indexOf('.'))
	}

	
	def runAngularProject(String srcGenDirectoryAbsolutePath) {
		AngularRunner.run(srcGenDirectoryAbsolutePath);
	}
}
