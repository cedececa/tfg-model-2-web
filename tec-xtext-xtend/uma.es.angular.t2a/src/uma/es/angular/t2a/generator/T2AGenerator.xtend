/*
 * generated by Xtext 2.26.0
 */
package uma.es.angular.t2a.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import uma.es.angular.t2a.t2A.Root
import uma.es.angular.t2a.t2A.Page
import uma.es.angular.t2a.t2A.Comp
import uma.es.angular.t2a.t2A.Feature
import uma.es.angular.t2a.t2A.PageFeature
import uma.es.angular.t2a.t2A.InstanciaEDOM
import uma.es.angular.t2a.t2A.InstanceEDOMFeature
import java.nio.file.Paths
import org.eclipse.emf.common.util.URI
import org.eclipse.core.resources.ResourcesPlugin


/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class T2AGenerator extends AbstractGenerator {

	// For the absolute path of the generated files
	
	def printOutputDirectoryAbsolutePath(IFileSystemAccess2 fsa){
 // generate a dummy file and extract the output directory from the file path
        fsa.generateFile("dummy.txt", "dummy content")
        val uri = URI.createURI(fsa.getURI("dummy.txt").toString)
        val outputDir = if (uri.isFile()) {
            Paths.get(uri.toFileString()).getParent().toString()
        } else if (uri.isPlatform()) {
            ResourcesPlugin.getWorkspace().getRoot().getLocation().toFile().getAbsolutePath()
        } else {
            throw new IllegalArgumentException("Unsupported URI scheme: " + uri.scheme)
        }

        // delete the dummy file
        fsa.deleteFile("dummy.txt")

        // use the generated file path as needed
        println("Generated files path: " + outputDir)
	}
	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		printOutputDirectoryAbsolutePath(fsa)
		
		var root = resource.contents.head as Root;
		    val outputDir = fsa.getURI("").toFileString
		System.out.println("out "+outputDir);

        // use the generated file path as needed
        println("Generated files path: " + outputDir)
		for (element : root.elements) {
			if (element.eClass.name.equals('Page')) {
				generateClassFile(element as Page, fsa);
			}
			if (element.eClass.name.equals('Comp')) {
				generateClassFile(element as Comp, fsa);
			}
		}
		runAngularProject(fsa, resource, context);

	}

	def generateClassFile(Page page, IFileSystemAccess2 fsa) {
		var nameLowercase = (new String(page.name)).toLowerCase()
		fsa.generateFile(nameLowercase + '/' + nameLowercase + '.page.ts', toTSCode(page));
		fsa.generateFile(nameLowercase + '/' + nameLowercase + '.page.html', toHTMLCode(page));
	}

	def generateClassFile(Comp comp, IFileSystemAccess2 fsa) {
		var nameLowercase = (new String(comp.name)).toLowerCase()
		fsa.generateFile(nameLowercase + '/' + nameLowercase + '.comp.ts', toTSCode(comp));
		fsa.generateFile(nameLowercase + '/' + nameLowercase + '.comp.html', toHTMLCode(comp));
	}

	def className(Resource res) {
		var name = res.URI.lastSegment;
		return name.substring(0, name.indexOf('.'))
	}

	def toTSCode(Comp comp) {
		'''
			@Component({
				selector: '«comp.name»',
				templateUrl: '«comp.name».comp.html',
				styleUrls:['«comp.name».comp.scss']	
			})
			export class Comp«comp.name»{
				
			}
		'''
	}

	def toTSCode(Page page) {
		'''
			@Component({
				selector: '«page.name»',
				templateUrl: '«page.name».page.html',
				styleUrls:['«page.name».page.scss']	
			})
			export class Page«page.name»{
				
			}
		'''
	}

	def toHTMLCode(Comp comp) {
		'''
			«FOR feature : comp.features»
				«var f = feature as Feature»
				«IF f.instanciaEDOM !== null »
					«toHTMLCodeForInstanciaEDOM(f.instanciaEDOM)»
				«ENDIF»	
				«IF f.isAllowSlot»
					<ng-content>
					</ng-content>
				«ENDIF»
				«IF f.string!==null»
					«f.string»
				«ENDIF»
			«ENDFOR»
		'''
	}

	def toHTMLCode(Page page) {
		'''
			«FOR pageFeature : page.pageFeatures»
				«var pf = pageFeature as PageFeature»
				«IF pf.instanciaEDOM !== null »
					«toHTMLCodeForInstanciaEDOM(pf.instanciaEDOM)»
				«ENDIF»	
				«IF pf.string!==null»
					«pf.string»
				«ENDIF»
			«ENDFOR»
		'''
	}

	def toHTMLCodeForInstanciaEDOM(InstanciaEDOM instanciaEDOM) {
		''' 
			<«instanciaEDOM.instancia.name»>
				«FOR insfeature : instanciaEDOM.insfeatures»
					«var insf = insfeature as InstanceEDOMFeature»
					«IF insf.instanciaEDOM !== null»
						«toHTMLCodeForInstanciaEDOM(insf.instanciaEDOM)»
					«ENDIF»	
					«IF insf.string!==null»
						«insf.string»
					«ENDIF»
				«ENDFOR»
			</«instanciaEDOM.instancia.name»>
		'''
	}

	def runAngularProject(IFileSystemAccess2 fsa, Resource r, IGeneratorContext context) {

		// get relative path of the instance 		
		var relativePath = r.URI.toPlatformString(true)
		System.out.println(relativePath);
		
		AngularRunner.AngularRunner(relativePath);
	}
}
